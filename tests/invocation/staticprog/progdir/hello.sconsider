# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import os
from socket import gethostbyname
from tempfile import gettempdir
from stat import *
from SomeUtils import findFiles, listFiles, getfqdn

Import('*')

configdir = 'config'
hostname, domain, fqdn = getfqdn()

searchReplaceDict = {
    'FQDN': fqdn,
    'HOSTNAME': hostname,
    'HOSTNAMEIP': gethostbyname(hostname),
    'DOMAINONLY': domain,
    'TMPDIR': lambda env: gettempdir() if str(env['PLATFORM']) in ['cygwin', 'win32'] else '/tmp',
}


def setUp(target, source, env):
    pass


def tearDown(target, source, env):
    pass


programDepends = []
sourceFiles = ['hello.cpp']
includeSubdir = '.'
exportIncludes = listFiles([os.path.join(includeSubdir, '*.h')])
copyFiles = [
    (listFiles([os.path.join(configdir, '*.any')]), S_IRUSR | S_IRGRP | S_IROTH, searchReplaceDict),
]
bin_name = 'hello'
runConfigRunner = {
    'setUp': setUp,
    'tearDown': tearDown,
    'runParams': '',
}

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from SConsider import createTargets
    buildSettings = {
        packagename: {
            'linkDependencies': programDepends,
            'sourceFiles': sourceFiles,
            'targetType': 'Program',
            'targetName': bin_name,
            'includeSubdir': includeSubdir,
            'public': {
                'includeSubdir': includeSubdir,
                'includes': exportIncludes,
            }
        },
        'runner': {
            'targetType': 'ProgramApp',
            'targetName': bin_name + 'runner',
            'usedTarget': packagename + '.' + packagename,
            'copyFiles': copyFiles,
            'runConfig': runConfigRunner,
        },
    }

    createTargets(packagename, buildSettings)

elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    from TargetMaker import EnvBuilder
    from TargetHelpers import createCopyFilesTarget, createPackageTestTarget, createPackageRunTarget, createPackageProgramScript, createPackageProgram, createAlias

    def setRelTargetDir(env, prefix='apps'):
        env.setRelativeTargetDirectory(os.path.join(prefix, packagename))

    # create own library
    includeTarget = EnvBuilder(
        export=[EnvBuilder().include(Dir(includeSubdir))]).build().RegisterPackageTarget(
            packagename=packagename, targetname='include')

    bin_target = createPackageProgram(packagename,
                                      bin_name,
                                      sourceFiles,
                                      depend=[includeTarget],
                                      pkg_local=[setRelTargetDir])

    copyTarget = createCopyFilesTarget(packagename,
                                       'configfiles',
                                       lambda env: env.getTargetBaseInstallDir(),
                                       copyFiles,
                                       pkg_local=[setRelTargetDir])

    script_target = createPackageProgramScript(packagename,
                                               bin_name,
                                               bin_target,
                                               depend=copyTarget,
                                               pkg_local=[setRelTargetDir])

    runner_target = createPackageRunTarget(packagename, 'runner', script_target, settings=runConfigRunner)

    EnvBuilder().depend().build().RegisterPackageTarget(packagename=packagename,
                                                        targetname='runner',
                                                        target=runner_target)

    createAlias('binaries', runner_target)

    EnvBuilder().depend(includeTarget, bin_target,
                        script_target).build().RegisterPackageTarget(packagename=packagename,
                                                                     targetname=packagename)
