import os
import SCons.Action
import SCons.Builder

def generateShellScript(scriptFile, env, wrapper):
    scriptFile.write('#!/bin/sh\n')
    scriptFile.write('# Autogenerated by SCons; do not edit!\n')
    if wrapper > 0:
        scriptFile.write('INST_DIR=`dirname $0`\n')
        scriptFile.write('INST_DIR=`cd $INST_DIR/../../; pwd`\n')
    scriptFile.write('LD_LIBRARY_PATH=$INST_DIR/'+str(env['LIBDIR']))
    if env.has_key('WRAPPERLIBS'):
        for lib in env['WRAPPERLIBS']:
            scriptFile.write(':'+lib)
    scriptFile.write(':$LD_LIBRARY_PATH\n')
    scriptFile.write('PATH=$INST_DIR/'+str(env['SCRIPTDIR'])+':$PATH\n')
    scriptFile.write('export LD_LIBRARY_PATH PATH\n')
    scriptFile.write('if [ ! -w $HOME/pfiles/. ]; then\n')
    scriptFile.write('  mkdir $HOME/pfiles\n')
    scriptFile.write('  if [ $? -ne 0 ]; then\n')
    scriptFile.write('    echo "Cannot create local pfiles directory $HOME/pfiles" >&2\n')
    scriptFile.write('    exit 3\n')
    scriptFile.write('  fi\n')
    scriptFile.write('fi\n')
    scriptFile.write('if [ "x$PFILES" != x ]; then\n')
    scriptFile.write('  syspfiles=`echo $PFILES | sed "s%.*;%%"`\n')
    scriptFile.write('  locpfiles=`echo $PFILES | sed "s%;*$syspfiles$%%"`\n')
    scriptFile.write('fi\n')
    scriptFile.write('if [ "x$locpfiles" = x ]; then\n')
    scriptFile.write('  locpfiles="$HOME/pfiles"\n')
    scriptFile.write('else\n')
    scriptFile.write('  locpfiles=`echo ":$locpfiles:" | sed "s%:$HOME/pfiles:%:%g" | sed "s%::*$%%"`\n')
    scriptFile.write('  locpfiles="$HOME/pfiles$locpfiles"\n')
    scriptFile.write('fi\n')
    scriptFile.write('if [ "x$syspfiles" = x ]; then\n')
    scriptFile.write('  syspfiles="$INST_DIR/syspfiles"\n')
    scriptFile.write('else\n')
    scriptFile.write('  syspfiles=`echo ":$syspfiles:" | sed "s%:$INST_DIR/syspfiles:%:%g" | sed "s%::*$%%"`\n')
    scriptFile.write('  syspfiles="$INST_DIR/syspfiles$syspfiles"\n')
    scriptFile.write('fi\n')
    scriptFile.write('PFILES="$locpfiles;$syspfiles"\n')
    scriptFile.write('PYTHONPATH=$INST_DIR/python:$PYTHON_PATH\n')
    scriptFile.write('export PFILES PYTHONPATH\n')
    if env.has_key('ROOTSYS'):
        scriptFile.write('export ROOTSYS='+env['ROOTSYS']+'\n')

def generateWSHScript(scriptFile, env, wrapper):
    scriptFile.write("' Autogenerated by SCons; do not edit!\n")
    scriptFile.write('set shell = CreateObject("WScript.Shell")\n')
    scriptFile.write('set env = shell.Environment("Process")\n')
    if wrapper > 0:
        scriptFile.write('INST_DIR = WScript.ScriptFullName\n')
        scriptFile.write('INST_DIR = Left(INST_DIR,InStrRev(INST_DIR,"\\")-1)\n')
        scriptFile.write('INST_DIR = Left(INST_DIR,InStrRev(INST_DIR,"\\")-1)\n')
        scriptFile.write('INST_DIR = Left(INST_DIR,InStrRev(INST_DIR,"\\")-1)\n')
        scriptFile.write('env("INST_DIR")=INST_DIR\n')
    scriptFile.write('COAST_ROOT = env.item("COAST_ROOT")\n')
    scriptFile.write('If COAST_ROOT = "" Then\n')
    scriptFile.write('  WScript.Echo("What is the location of the External libraries?")\n')
    scriptFile.write('  WScript.Echo("If you set %COAST_ROOT% to this location this script will no longer ask")\n')
    scriptFile.write('  COAST_ROOT = WScript.StdIn.ReadLine()\n')
    scriptFile.write('  env("COAST_ROOT")=COAST_ROOT\n')
    scriptFile.write('End If\n')
    scriptFile.write('env("PATH") = env.Item("PATH") & ";" & INST_DIR & "\\' + str(env['LIBDIR'])+'"\n')
    scriptFile.write('If COAST_ROOT = "" or INST_DIR = "" Then\n')
    scriptFile.write('  WScript.Echo("COAST_ROOT not set or unable to determine installation directory")\n')
    scriptFile.write('  WScript.Quit(1)\n')
    scriptFile.write('End If\n')
    scriptFile.write('env("PATH") = env.Item("PATH") ')
    if env.has_key('WRAPPERLIBS'):
        for lib in env['WRAPPERLIBS']:
            lib = lib.replace("$COAST_ROOT", "COAST_ROOT & \"") + "\""
            scriptFile.write('& ";" & '+lib)
    scriptFile.write('\n')
    scriptFile.write('set filesystemObject = CreateObject("Scripting.FileSystemObject")\n')
    scriptFile.write('If filesystemObject.FolderExists(env.item("HOMEDRIVE") & env.item("HOMEPATH") & "\\pfiles") Then\n')
    scriptFile.write('  shell.Exec("cmd.exe /C md """ & env.item("HOMEDRIVE") & env.item("HOMEPATH") & "\\pfiles")\n')
    scriptFile.write('End If\n')
    scriptFile.write('If env.item("PFILES") <> "" Then\n')
    scriptFile.write('  locpfiles = Left(env.item("PFILES"), InStr(env.item("PFILES"), "|"))\n')
    scriptFile.write('  If locpfiles = "" Then\n')
    scriptFile.write('    locpfiles = env.item("PFILES")\n')
    scriptFile.write('  End If\n')
    scriptFile.write('  sypfiles = Replace(env.item("PFILES"), locpfiles, "")\n')
    scriptFile.write('  syspfiles = Replace(syspfiles, "|", "")\n')
    scriptFile.write('End If\n')
    scriptFile.write('If locpfiles = "" Then\n')
    scriptFile.write('  locpfiles = env.item("HOMEDRIVE") & env.item("HOMEPATH") & "\\pfiles"\n')
    scriptFile.write('Else\n')
    scriptFile.write('  locpfiles = Replace(";" & locpfiles & ";", ";" & env.item("HOMEDRIVE") & env.item("HOMEPATH"), ";")\n')
    scriptFile.write('  locpfiles = Replace(locpfiles, ";;", "")\n')
    scriptFile.write('  locpfiles = env.item("HOMEDRIVE") & env.item("HOMEPATH") & "\\pfiles" & locpfiles\n')
    scriptFile.write('End If\n')
    scriptFile.write('if syspfiles = "" Then\n')
    scriptFile.write('  syspfiles = INST_DIR & "\\syspfiles"\n')
    scriptFile.write('Else\n')
    scriptFile.write('  syspfiles = Replace(";" & syspfiles & ";", ";" & INST_DIR & "\\syspfiles", ";")\n')
    scriptFile.write('  syspfiles = Replace(syspfiles, ";;", "")\n')
    scriptFile.write('  syspfiles = INST_DIR & "\\syspfiles"\n')
    scriptFile.write('End If\n')
    scriptFile.write('env("PFILES") = locpfiles & "|" & syspfiles\n')
    scriptFile.write('For i=0 to WScript.Arguments.Count-1\n')
    scriptFile.write('  arguments = arguments & WScript.Arguments.Item(i) & " "\n')
    scriptFile.write('Next\n')
    if env.has_key('ROOTSYS'):
        rootsys = env['ROOTSYS'].replace("$COAST_ROOT", "")
        scriptFile.write('env("ROOTSYS") = env("COAST_ROOT") & "'+rootsys+'"\n')
    scriptFile.write('env("PYTHONPATH") = INST_DIR & "\\python" & env("PYTHONPATH")\n')
    return

def generatePosixScript(target, source, env):
    if not os.path.exists(str(env['SCRIPTDIR'].File('_setup'))):
        scriptFile = open(str(env['SCRIPTDIR'].File('_setup')), 'w')
        generateShellScript(scriptFile, env, 0)
        scriptFile.close()

    for executable in source:
        scriptFile = open(str(env['SCRIPTDIR'].File(os.path.basename(str(executable)))), 'w')
        generateShellScript(scriptFile, env, 1)
        scriptFile.write(os.path.join('$INST_DIR',str(executable))+' "$@"\n')
        scriptFile.close()
    return 0

def generateWindowsScript(target, source, env):
    if not os.path.exists(str(env['SCRIPTDIR'].File('_setup.vbs'))):
        scriptFile = open(str(env['SCRIPTDIR'].File('_setup.vbs')), 'w')
        generateWSHScript(scriptFile, env, 0)
        scriptFile.close()
    for executable in source:
        scriptFile = open(str(env['SCRIPTDIR'].File(os.path.splitext(os.path.basename(str(executable)))[0]+".vbs")), 'w')
        generateWSHScript(scriptFile, env, 1)
        scriptFile.write('shell.Run "cmd.exe /k """ & INST_DIR & "\\'+str(executable)+'"" " & arguments, 1, true')
        scriptFile.close()

def generateScriptEmitter(target, source, env):
    target = []
    for src in source:
        target.append(env['SCRIPTDIR'].File(os.path.basename(src.abspath)))
    return (target, source)

def generate(env):
    if env['PLATFORM'] != 'win32':
        GenerateScriptAction = SCons.Action.Action(generatePosixScript, "Creating wrapper script for '$TARGET'")
        GenerateScriptBuilder = SCons.Builder.Builder(action = [GenerateScriptAction, SCons.Defaults.Chmod('$TARGET', 0755)],
                                                      emitter = generateScriptEmitter,
                                                      single_source = 1)
    else:
        GenerateScriptAction = SCons.Action.Action(generateWindowsScript, "Creating wrapper script fpr '$TARGET'")
	GenerateScriptBuilder = SCons.Builder.Builder(action = [GenerateScriptAction], emitter = generateScriptEmitter, single_source = 1)

    env['BUILDERS']['GenerateWrapperScript'] = GenerateScriptBuilder

def exists(env):
    return 1;
