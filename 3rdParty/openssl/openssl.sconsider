import SConsider, ThirdParty

Import('*')

if ThirdParty.hasBinaryDist(packagename):    
    buildSettings = {
        packagename : {
            'linkDependencies' : [
                packagename + '.ssl',
                packagename + '.crypto',
            ],
            'targetType'       : 'IncludeOnly',
            'public' : {
                'includeSubdir': 'include',
            }
        },
        'ssl' : {
            'sourceFiles'      : [ThirdParty.getBinaryDistPath(packagename).File('/ssl')],
            'targetType'       : 'PrecompiledLibraryInstallBuilder',
        },
        'crypto' : {
            'sourceFiles'      : [ThirdParty.getBinaryDistPath(packagename).File('/crypto')],
            'targetType'       : 'PrecompiledLibraryInstallBuilder',
        },
        'opensslbin' : {
            'sourceFiles'      : [ThirdParty.getBinaryDistPath(packagename).File('/openssl')],
            'targetType'       : 'PrecompiledBinary',
        },
        'openSSL' : {
            'targetType'       : 'ProgramApp',
            'runConfig' : {
            },
            'requires' : [
                packagename + '.ssl',
                packagename + '.crypto',
            ],
            'usedTarget'       : packagename + '.opensslbin',
        }
    }
elif ThirdParty.hasSourceDist(packagename):
    print '--with-src-'+packagename+' not implemented!'
    Exit(1)
else:
    def CheckExecutable(context, executable):
        context.Message('Checking for executable {0}... '.format(executable))
        result = WhereIs(executable)
        context.Result(bool(result))
        return result
    
    env = SConsider.cloneBaseEnv()
    conf = Configure(env, custom_tests = {'CheckExecutable' : CheckExecutable})
    if not conf.CheckCHeader('openssl/ssl.h'):
        print 'Did not find header for '+packagename
        Exit(1)
    if not conf.CheckLib('ssl'):
        print 'Did not find library for '+packagename
        Exit(1)
    if not conf.CheckLib('crypto'):
        print 'Did not find library for '+packagename
        Exit(1)
    opensslbin = conf.CheckExecutable('openssl')
    if not opensslbin:
        print 'Did not find executable for '+packagename
        Exit(1)
    env = conf.Finish()
    
    buildSettings = {
        packagename : {
            'linkDependencies' : [
                packagename + '.ssl',
                packagename + '.crypto',
            ],
        },
        'ssl' : {
            'public' : {
                'appendUnique'     : {
                    'LIBS'         : ['ssl'],
                },
            },
        },
        'crypto' : {
            'public' : {
                'appendUnique'     : {
                    'LIBS'         : ['crypto'],
                },
            },
        },
        'opensslbin' : {
            'sourceFiles'      : [opensslbin],
            'targetType'       : 'PseudoFile',
        },
        'openSSL' : {
            'targetType'       : 'ProgramApp',
            'runConfig' : {
            },
            'requires' : [
                packagename + '.ssl',
                packagename + '.crypto',
            ],
            'usedTarget'       : packagename + '.opensslbin',
        }
    }

SConsider.createTargets(packagename, buildSettings)
