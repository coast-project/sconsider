import SConsider, ThirdParty, pdb

Import('*')

buildSettings = {}

def configure():
    if GetOption('clean') or GetOption('help'):
        return True 
       
    env = SConsider.cloneBaseEnv()
    conf = Configure(env)
    if not conf.CheckCXXHeader('boost/version.hpp'):
        print 'Did not find headers for '+packagename
        return False
    if not conf.CheckLibWithHeader('boost_regex', 'boost/regex.h', 'CXX'):
        print 'Did not find library or header for '+packagename
        return False
    env = conf.Finish()
    
    return True

if ThirdParty.hasBinaryDist(packagename):
    print '--with-boost not implemented!'
    Exit(1)
elif ThirdParty.hasSourceDist(packagename):
    buildSettings = {
        'include' : {
            'public' : {
                'includeSubdir': '',
            },
        },
        'regex' : {
            'targetType'       : 'LibraryShared',
            'linkDependencies' : [
                SConsider.generateFulltargetname(packagename, 'include'),  # used to pass public include dirs of boost
            ],
            'sourceFiles'      : SConsider.listFiles(['libs/regex/src/*.cpp']),
    #        'appendUnique'     : {
    #            'CPPDEFINES'   : ['BOOST_HAS_ICU=1'],
    #            'LIBS'         : ['icui18n','icuuc'],
    #        },
        },
    }
else:
    if configure():
        buildSettings = {
            'include' : {
            },
            'regex' : {
                'public' : {
                    'appendUnique'     : {
                        'LIBS'         : ['boost_regex'],
                    },
                },
            },
        }

SConsider.createTargets(packagename, buildSettings)
