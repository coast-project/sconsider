import SConsider, ThirdParty

Import('*')

buildSettings = {}

def configure():
    if GetOption('clean') or GetOption('help'):
        return True 
    
    env = SConsider.cloneBaseEnv()
    conf = Configure(env)
    if not conf.CheckLibWithHeader('loki', 'loki/SmartPtr.h', 'CXX'):
        print 'Did not find library or header for '+packagename
        return False
    env = conf.Finish()
    return True

if ThirdParty.hasBinaryDist(packagename):
    print '--with-loki not implemented!'
    Exit(1)
elif ThirdParty.hasSourceDist(packagename):
    buildSettings = {
        'include' : {
            'public' : {
                'includeSubdir': 'include',
            }
        },
        'objects' : {
            'targetType'       : 'LibraryShared',
            'linkDependencies' : [
                SConsider.generateFulltargetname(packagename, 'include'),
            ],
            'sourceFiles'      : SConsider.listFiles( ['src/*.cpp'] ),
        },
    }
else:
    if configure():
        buildSettings = {
            'include' : {
            },
            'lokiObjects' : {
                'public' : {
                    'appendUnique'     : {
                        'LIBS'         : ['loki'],
                    },
                },
                
            },
        }

SConsider.createTargets(packagename, buildSettings)
