import SConsider, ThirdParty, os
from stat import *

Import('*')

buildSettings = {}

def configure():
    env = SConsider.cloneBaseEnv()
    conf = Configure(env, custom_tests = {'CheckExecutable' : CheckExecutable})
    if not conf.CheckCHeader('sybdb.h'):
        print 'Did not find header for '+packagename
        return False
    if not conf.CheckLib('sybunic'):
        print 'Did not find library for '+packagename
        return False
    if not conf.CheckLib('sybcs'):
        print 'Did not find library for '+packagename
        return False
    if not conf.CheckLib('sybct'):
        print 'Did not find library for '+packagename
        return False
    if not conf.CheckLib('sybintl'):
        print 'Did not find library for '+packagename
        return False
    if not conf.CheckLib('sybtcl'):
        print 'Did not find library for '+packagename
        return False
    if not conf.CheckLib('sybcomn'):
        print 'Did not find library for '+packagename
        return False
    isqlbin = conf.CheckExecutable('isql')
    if not isqlbin:
        print 'Did not find executable for '+packagename
        return False
    env = conf.Finish()
    return True

if ThirdParty.hasBinaryDist(packagename):    
    buildSettings = {
        packagename : {
            'linkDependencies' : [
                packagename + '.sybunic',
                packagename + '.sybcs',
                packagename + '.sybct',
                packagename + '.sybintl',
                packagename + '.sybtcl',
                packagename + '.sybcomn',
            ],
            'requires'         : [packagename + '.config'],
            'targetType'       : 'IncludeOnly',
            'public' : {
                'includeSubdir': 'include',
            }
        },
        'config': {
            'targetType'       : 'CopyFiles',
            'copyFiles' : [
                (SConsider.listFiles(['config/*',
                                      'charsets/*',
                                      'locales/*'],
                                      recursive=True), S_IRUSR|S_IRGRP|S_IROTH),
            ],
            'appendUnique'     : { 'RELTARGETDIR' : os.path.join('globals', packagename) },
            'public': {
                'execEnv' : {
                    'SYBASE': os.path.join('$BASEOUTDIR', '$RELTARGETDIR'),
                    'LANG'  : 'C',
                },
            },
        },
        'sybunic' : {
            'sourceFiles'      : [ThirdParty.getBinaryDistDir(packagename).File('sybunic')],
            'targetType'       : 'PrecompiledLibraryInstallBuilder',
        },
        'sybcs' : {
            'sourceFiles'      : [ThirdParty.getBinaryDistDir(packagename).File('sybcs')],
            'targetType'       : 'PrecompiledLibraryInstallBuilder',
        },
        'sybct' : {
            'sourceFiles'      : [ThirdParty.getBinaryDistDir(packagename).File('sybct')],
            'targetType'       : 'PrecompiledLibraryInstallBuilder',
        },
        'sybintl' : {
            'sourceFiles'      : [ThirdParty.getBinaryDistDir(packagename).File('sybintl')],
            'targetType'       : 'PrecompiledLibraryInstallBuilder',
        },
        'sybtcl' : {
            'sourceFiles'      : [ThirdParty.getBinaryDistDir(packagename).File('sybtcl')],
            'targetType'       : 'PrecompiledLibraryInstallBuilder',
        },
        'sybcomn' : {
            'sourceFiles'      : [ThirdParty.getBinaryDistDir(packagename).File('sybcomn')],
            'targetType'       : 'PrecompiledLibraryInstallBuilder',
        },
        'isql': {
            'sourceFiles'      : [ThirdParty.getBinaryDistDir(packagename).File('isql')],
            'requires' : [
                SConsider.generateFulltargetname(packagename,'config'),
            ],
            'targetType'       : 'PrecompiledBinary',
        },
    }
elif ThirdParty.hasSourceDist(packagename):
    print '--with-src-'+packagename+' not implemented!'
    Exit(1)
else:
    def CheckExecutable(context, executable):
        context.Message('Checking for executable {0}... '.format(executable))
        result = WhereIs(executable)
        context.Result(bool(result))
        return result
    
    if configure():
        buildSettings = {
            packagename : {
                'linkDependencies' : [
                    packagename + '.sybunic',
                    packagename + '.sybcs',
                    packagename + '.sybct',
                    packagename + '.sybintl',
                    packagename + '.sybtcl',
                    packagename + '.sybcomn',
                ],
                'requires'         : [packagename + '.config'],
                'targetType'       : 'IncludeOnly',
            },
            'config': {
                'targetType'       : 'CopyFiles',
                'copyFiles' : [
                    (SConsider.listFiles(['config/*','charsets/*','locales/*'], recursive=True), S_IRUSR|S_IRGRP|S_IROTH),
                ],
                'appendUnique'     : { 'RELTARGETDIR' : os.path.join('globals', packagename) },
                'public': {
                    'execEnv' : {
                        'SYBASE': os.path.join('$BASEOUTDIR', '$RELTARGETDIR'),
                        'LANG'  : 'C',
                    },
                },
            },
            'sybunic' : {
                'public' : {
                    'appendUnique'     : {
                        'LIBS'         : ['sybunic'],
                    },
                },
            },
            'sybcs' : {
                'public' : {
                    'appendUnique'     : {
                        'LIBS'         : ['sybcs'],
                    },
                },
            },
            'sybct' : {
                'public' : {
                    'appendUnique'     : {
                        'LIBS'         : ['sybct'],
                    },
                },
            },
            'sybintl' : {
                'public' : {
                    'appendUnique'     : {
                        'LIBS'         : ['sybintl'],
                    },
                },
            },
            'sybtcl' : {
                'public' : {
                    'appendUnique'     : {
                        'LIBS'         : ['sybtcl'],
                    },
                },
            },
            'sybcomn' : {
                'public' : {
                    'appendUnique'     : {
                        'LIBS'         : ['sybcomn'],
                    },
                },
            },
            'isql': {
                'sourceFiles'      : [isqlbin],
                'requires' : [
                    SConsider.generateFulltargetname(packagename,'config'),
                ],
                'targetType'       : 'PseudoFile',
            },
        }

SConsider.createTargets(packagename, buildSettings)
